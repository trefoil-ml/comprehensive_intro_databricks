{"version":"NotebookV1","origId":1745794912681904,"name":"Stream-Generator","language":"python","commands":[{"version":"CommandV1","origId":1745794912681905,"guid":"83c763a1-54f8-46eb-afe7-877e3f8319b8","subtype":"command","commandType":"auto","position":1.0,"command":"class DummyDataGenerator:\n  streamDirectory = \"dbfs:/tmp/{}/new-flights\".format(username)\n\nNone # suppress output","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"93028539-0991-44cd-bef8-ece00a7bf29c"},{"version":"CommandV1","origId":1745794912681906,"guid":"53edfe5b-1978-4102-8b26-04e24afd32b9","subtype":"command","commandType":"auto","position":2.0,"command":"%scala\n\nimport scala.util.Random\nimport java.io._\nimport java.time._\n\n// Notebook #2 has to set this to 8, we are setting\n// it to 200 to \"restore\" the default behavior.\nspark.conf.set(\"spark.sql.shuffle.partitions\", 200)\n\n// Make the username available to all other languages.\n// \"WARNING: use of the \"current\" username is unpredictable\n// when multiple users are collaborating and should be replaced\n// with the notebook ID instead.\nval username = com.databricks.logging.AttributionContext.current.tags(com.databricks.logging.BaseTagDefinitions.TAG_USER);\nspark.conf.set(\"com.databricks.training.username\", username)\n\nobject DummyDataGenerator extends Runnable {\n  var runner : Thread = null;\n  val className = getClass().getName()\n  val streamDirectory = s\"dbfs:/tmp/$username/new-flights\"\n  val airlines = Array( (\"American\", 0.15), (\"Delta\", 0.17), (\"Frontier\", 0.19), (\"Hawaiian\", 0.21), (\"JetBlue\", 0.25), (\"United\", 0.30) )\n\n  val rand = new Random(System.currentTimeMillis())\n  var maxDuration = 3 * 60 * 1000 // default to a couple of minutes\n\n  def clean() {\n    System.out.println(\"Removing old files for dummy data generator.\")\n    dbutils.fs.rm(streamDirectory, true)\n    if (dbutils.fs.mkdirs(streamDirectory) == false) {\n      throw new RuntimeException(\"Unable to create temp directory.\")\n    }\n  }\n\n  def run() {\n    val date = LocalDate.now()\n    val start = System.currentTimeMillis()\n\n    while (System.currentTimeMillis() - start < maxDuration) {\n      try {\n        val dir = s\"/dbfs/tmp/$username/new-flights\"\n        val tempFile = File.createTempFile(\"flights-\", \"\", new File(dir)).getAbsolutePath()+\".csv\"\n        val writer = new PrintWriter(tempFile)\n\n        for (airline <- airlines) {\n          val flightNumber = rand.nextInt(1000)+1000\n          val departureTime = LocalDateTime.now().plusHours(-7)\n          val (name, odds) = airline\n          val test = rand.nextDouble()\n\n          val delay = if (test < odds)\n            rand.nextInt(60)+(30*odds)\n            else rand.nextInt(10)-5\n\n          println(s\"- Flight #$flightNumber by $name at $departureTime delayed $delay minutes\")\n          writer.println(s\"\"\" \"$flightNumber\",\"$departureTime\",\"$delay\",\"$name\" \"\"\".trim)\n        }\n        writer.close()\n\n        // wait a couple of seconds\n        Thread.sleep(rand.nextInt(5000))\n\n      } catch {\n        case e: Exception => {\n          printf(\"* Processing failure: %s%n\", e.getMessage())\n          return;\n        }\n      }\n    }\n    println(\"No more flights!\")\n  }\n\n  def start(minutes:Int = 5) {\n    maxDuration = minutes * 60 * 1000\n\n    if (runner != null) {\n      println(\"Stopping dummy data generator.\")\n      runner.interrupt();\n      runner.join();\n    }\n    println(s\"Running dummy data generator for $minutes minutes.\")\n    runner = new Thread(this);\n    runner.start();\n  }\n\n  def stop() {\n    start(0)\n  }\n}\n\nDummyDataGenerator.clean()\n\ndisplayHTML(\"Imported streaming logic...\") // suppress output","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9a9c3e3e-f975-424a-80dc-7120911014df"}],"dashboards":[],"guid":"f988bf05-d430-4dba-ad67-e62b0ce789dc","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}