{"version":"NotebookV1","origId":1745794912675579,"name":"03-Joins-Aggregations","language":"scala","commands":[{"version":"CommandV1","origId":1745794912675580,"guid":"a743c9f8-9052-44d4-8ce0-0f9a1c8c9064","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n# Aggregations and JOINs\nApache Spark&trade; and Databricks&reg; allow you to create on-the-fly data lakes.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b04f6825-5e50-4c77-967d-22a64506fd7c"},{"version":"CommandV1","origId":1745794912675581,"guid":"f6fb273e-5fd2-4c57-807a-960cc682e221","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n### Getting Started\n\nRun the following cell to configure our \"classroom.\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f1c75b3b-ae4c-46d2-b8ec-3871224fb0de"},{"version":"CommandV1","origId":1745794912675582,"guid":"fa0d6f25-b40d-4e3c-b705-89d43887dc27","subtype":"command","commandType":"auto","position":4.0,"command":"%run \"./Includes/Classroom-Setup\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"99ad850e-6e07-40eb-b572-ec5054e9c9df"},{"version":"CommandV1","origId":1745794912675583,"guid":"07c120b6-b26d-4ecf-870e-7bbe95a52b6a","subtype":"command","commandType":"auto","position":6.0,"command":"%md-sandbox\n## Basic Aggregations\n\nUsing <a \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions\" target=\"_blank\">built-in Spark functions</a>, you can aggregate data in various ways. \n\nRun the cell below to compute the average of all salaries in the people DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> By default, you get a floating point value.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ee17ea14-3c18-456e-bf2b-9a442390919c"},{"version":"CommandV1","origId":1745794912675584,"guid":"71c2da29-2218-48ae-81c2-b3c6fbc40612","subtype":"command","commandType":"auto","position":8.0,"command":"val peopleDF = spark.read.parquet(\"/mnt/training/dataframes/people-10m.parquet\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8ce3af8f-f2eb-4de2-bdc6-7802151d5738"},{"version":"CommandV1","origId":1745794912675585,"guid":"8fb74633-047c-4bea-9764-fb9a38e6525a","subtype":"command","commandType":"auto","position":9.0,"command":"import org.apache.spark.sql.functions.avg\nval avgSalaryDF = peopleDF.select(avg($\"salary\") as \"averageSalary\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"037a190f-b2c5-467a-8d20-0eeca0e17fe4"},{"version":"CommandV1","origId":1745794912675586,"guid":"f1afe5a5-310f-4605-9609-9d93d8c29cf1","subtype":"command","commandType":"auto","position":10.0,"command":"%md\nConvert that value to an integer using the `round()` function. See\n<a href \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" class=\"text-info\">the documentation for <tt>round()</tt></a>\nfor more details.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ce5b25d8-c16b-4da9-a927-18be1d1a5122"},{"version":"CommandV1","origId":1745794912675587,"guid":"187b5462-e019-412f-a392-3cd98dfa784c","subtype":"command","commandType":"auto","position":11.0,"command":"import org.apache.spark.sql.functions.round\nval roundedAvgSalaryDF = avgSalaryDF.select(round($\"averageSalary\") as \"roundedAverageSalary\")\n\nroundedAvgSalaryDF.show()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4ef824e4-d818-4d32-ad7a-077ba3c3adda"},{"version":"CommandV1","origId":1745794912675588,"guid":"de62e2d8-17d7-4bdc-a238-42025761186c","subtype":"command","commandType":"auto","position":12.0,"command":"%md\nIn addition to the average salary, what are the maximum and minimum salaries?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cb62bc5b-b268-4520-9130-d67383467b7c"},{"version":"CommandV1","origId":1745794912675589,"guid":"be5e93ff-4009-440d-8855-d15c3492ac1b","subtype":"command","commandType":"auto","position":13.0,"command":"import org.apache.spark.sql.functions.{min, max}\nval salaryDF = peopleDF.select(max($\"salary\") as \"max\", min($\"salary\") as \"min\", round(avg($\"salary\")) as \"averageSalary\")\n\nsalaryDF.show()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b2bd9f23-6b20-4867-b055-d4f88ff5b4f5"},{"version":"CommandV1","origId":1745794912675590,"guid":"01ac97b7-cec5-4e3f-9b69-b66833eab421","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n## Joining Two Data Sets\n\nCorrelate the data in two data sets using a DataFrame join. \n\nThe `people` data set has 10 million names in it. \n\n> How many of the first names appear in Social Security data files? \n\nTo find out, use the Social Security data set with first name popularity data from the United States Social Security Administration. \n\nFor every year from 1880 to 2014, `dbfs:/mnt/training/ssn/names-1880-2016.parquet/` lists the first names of people born in that year, their gender, and the total number of people given that name. \n\nBy joining the `people` data set with `names-1880-2016`, weed out the names that aren't represented in the Social Security data.\n\n(In a real application, you might use a join like this to filter out bad data.)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"57174093-6865-4661-b53b-f319c81cde0f"},{"version":"CommandV1","origId":1745794912675591,"guid":"b33743df-5eef-4dab-b9fd-3d62ac00922f","subtype":"command","commandType":"auto","position":16.0,"command":"%md\nStart by taking a look at what the social security data set looks like. Each year is its own directory.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"51a69899-f632-4f29-9344-24e90bb77c72"},{"version":"CommandV1","origId":1745794912675592,"guid":"c751a3c5-7359-417a-bfd0-9c15af699f7f","subtype":"command","commandType":"auto","position":17.0,"command":"%fs ls dbfs:/mnt/training/ssn/names-1880-2016.parquet/","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"90ab6303-0c29-4f99-8f03-07d6c2011aa1"},{"version":"CommandV1","origId":1745794912675593,"guid":"ed0c0ac6-fe53-45df-9b92-d9f91ca9bde0","subtype":"command","commandType":"auto","position":18.0,"command":"%md\nLet's load this file into a DataFrame and look at the data.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ca2c2f3c-3ed1-4784-aca2-d8b2175c0eef"},{"version":"CommandV1","origId":1745794912675594,"guid":"ca35d466-09ec-4f94-8dde-91f0387b1516","subtype":"command","commandType":"auto","position":19.0,"command":"val ssaDF = spark.read.parquet(\"/mnt/training/ssn/names-1880-2016.parquet/\")\n\ndisplay(ssaDF)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c4140c4b-3f0d-4d76-a8ce-4588b8a85627"},{"version":"CommandV1","origId":1745794912675595,"guid":"e1d99629-0b97-4a3a-b4cb-64183bfc3a90","subtype":"command","commandType":"auto","position":20.0,"command":"%md\nNext, with a quick count of distinct names, get an idea of how many distinct names there are in each of the tables.\n\nDataFrames have a `distinct` method just for this purpose.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6244fee4-f7f6-413b-a65c-2ee14e435028"},{"version":"CommandV1","origId":1745794912675596,"guid":"04859504-d10e-4875-b0db-9a657b96d5b7","subtype":"command","commandType":"auto","position":21.0,"command":"val peopleDistinctNamesDF = peopleDF.select($\"firstName\").distinct","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"69d225ce-dc73-4f5b-a227-bb6d00e57956"},{"version":"CommandV1","origId":1745794912675597,"guid":"59a3263c-fce2-4041-bb03-4bff13738152","subtype":"command","commandType":"auto","position":22.0,"command":"peopleDistinctNamesDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"00abb0e6-6517-41e6-8371-f0c4adda7331"},{"version":"CommandV1","origId":1745794912675598,"guid":"2ba433c0-6758-40f0-93ae-29e16db25320","subtype":"command","commandType":"auto","position":23.0,"command":"%md-sandbox\nIn preparation for the join, let's rename the `firstName` column to `ssaFirstName` in the Social Security DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> Question to ponder: why would we want to do this?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"489e4e10-c884-4205-9dae-51174bc13e60"},{"version":"CommandV1","origId":1745794912675599,"guid":"639edb58-9490-439e-a24c-a4cd2617e0c0","subtype":"command","commandType":"auto","position":24.0,"command":"val ssaDistinctNamesDF = ssaDF.select($\"firstName\" as \"ssaFirstName\").distinct","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"48c0ccda-b4c7-44e0-b463-f4a50524dfa5"},{"version":"CommandV1","origId":1745794912675600,"guid":"755795fa-0300-4395-b404-c8cb555d9712","subtype":"command","commandType":"auto","position":25.0,"command":"%md\nCount how many distinct names in the Social Security DataFrame.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ee58a7e1-ea80-4687-8190-405808091522"},{"version":"CommandV1","origId":1745794912675601,"guid":"63e53b51-e1a9-45d5-814a-f2a3c5b4d425","subtype":"command","commandType":"auto","position":26.0,"command":"ssaDistinctNamesDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"25a3b7b7-c49a-4adb-8326-bbcccf9c613e"},{"version":"CommandV1","origId":1745794912675602,"guid":"c79e5e89-b1e5-42ab-be1f-6d95496cbe5d","subtype":"command","commandType":"auto","position":27.0,"command":"%md\nNow join the two DataFrames.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6e9f1fa7-2cfd-4382-a5ec-3b7822f4289a"},{"version":"CommandV1","origId":1745794912675603,"guid":"7df05b42-cbf4-4cea-a54d-ff1490bf5b46","subtype":"command","commandType":"auto","position":28.0,"command":"val joinedDF = peopleDistinctNamesDF.join(ssaDistinctNamesDF, peopleDistinctNamesDF(\"firstName\") === ssaDistinctNamesDF(\"ssaFirstName\"))","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e90ed47c-d993-4299-a036-e508e3af5051"},{"version":"CommandV1","origId":1745794912675604,"guid":"a238a150-7990-4d1f-b565-38f983dcfd1d","subtype":"command","commandType":"auto","position":29.0,"command":"%md\nHow many are there?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7a49918f-f7c1-48e2-ba1d-8a1f223f6c3b"},{"version":"CommandV1","origId":1745794912675605,"guid":"25b73970-554d-4509-a94e-987bf6ad2499","subtype":"command","commandType":"auto","position":30.0,"command":"joinedDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ec73afcb-1d96-4854-aa5b-4cb6c4432698"},{"version":"CommandV1","origId":1745794912675606,"guid":"d673f0e2-eb45-4c5b-9fd7-86117a02bee5","subtype":"command","commandType":"auto","position":31.0,"command":"%md-sandbox\n## Exercise 1\n\nIn the tables above, some of the salaries in the `peopleDF` DataFrame are negative. \n\nThese salaries represent bad data. \n\nYour job is to convert all the negative salaries to positive ones, and then sort the top 20 people by their salary.\n\n<img alt=\"Hint\" title=\"Hint\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.3em\" src=\"https://files.training.databricks.com/static/images/icon-light-bulb.svg\"/>&nbsp;**Hint:** See the Apache Spark documentation, <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">built-in functions</a>.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"60a3d8b2-c6df-4799-a13e-0800c4720965"},{"version":"CommandV1","origId":1745794912675607,"guid":"83b18eb1-1f4d-45cf-9a84-665eec20dda6","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n### Step 1\nCreate a DataFrame`PeopleWithFixedSalariesDF`, where all the negative salaries have been converted to positive numbers.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3b6b3df5-469a-4040-8fbd-6be318213f53"},{"version":"CommandV1","origId":1745794912675608,"guid":"f3bfb07b-c8e9-455f-822b-74bd6d317d0a","subtype":"command","commandType":"auto","position":33.0,"command":"// TODO\n\nimport org.apache.spark.sql.functions.abs\nval peopleWithFixedSalariesDF = // FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"197ebc91-88c3-48b8-ba4e-bad31c126cf3"},{"version":"CommandV1","origId":1745794912675609,"guid":"b45ad315-968f-4c5c-b14a-4d1b5813139c","subtype":"command","commandType":"auto","position":34.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val belowZero = peopleWithFixedSalariesDF.filter($\"salary\" < \"0\").count()\ndbTest(\"DF-L3-belowZero\", 0, belowZero, \"Expected 0 records to have a salary below zero, found \" + belowZero)\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d57dcf0f-5f71-4c3a-8a4e-e1e497218688"},{"version":"CommandV1","origId":1745794912675610,"guid":"030c4eac-caef-4dca-9e28-a9280291573a","subtype":"command","commandType":"auto","position":35.0,"command":"%md\n### Step 2\n\nStarting with the `peopleWithFixedSalariesDF` DataFrame, create another DataFrame called `PeopleWithFixedSalariesSortedDF` where:\n0. The data set has been reduced to the first 20 records.\n0. The records are sorted by the column `salary` in ascending order.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"75ab59b5-3d2a-46fb-889f-ef69df263efe"},{"version":"CommandV1","origId":1745794912675611,"guid":"6dd3ec50-f480-4c40-bf2b-ca4d124c9808","subtype":"command","commandType":"auto","position":36.0,"command":"// TODO\nval peopleWithFixedSalariesSortedDF = // FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4b3971ae-3405-44c0-829e-0007bf81ed0a"},{"version":"CommandV1","origId":1745794912675612,"guid":"3b2ad80e-fdc7-4bff-8bd5-9b4cf7790375","subtype":"command","commandType":"auto","position":37.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val resultsDF = peopleWithFixedSalariesSortedDF.select($\"salary\")\ndbTest(\"DF-L3-count\", 20, resultsDF.count(), \"Expected 20 records, found \" + resultsDF.count())\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"75d8c4ff-9695-420f-9952-53d1527e7b1f"},{"version":"CommandV1","origId":1745794912675613,"guid":"b887a33a-ac4d-4d8f-af26-138e4270be1e","subtype":"command","commandType":"auto","position":38.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val results = resultsDF.collect()\n\ndbTest(\"DF-L3-fixedSalaries-0\", Row(2), results(0))\ndbTest(\"DF-L3-fixedSalaries-1\", Row(3), results(1))\ndbTest(\"DF-L3-fixedSalaries-2\", Row(4), results(2))\n\ndbTest(\"DF-L3-fixedSalaries-10\", Row(19), results(10))\ndbTest(\"DF-L3-fixedSalaries-11\", Row(19), results(11))\ndbTest(\"DF-L3-fixedSalaries-12\", Row(20), results(12))\n\ndbTest(\"DF-L3-fixedSalaries-17\", Row(28), results(17))\ndbTest(\"DF-L3-fixedSalaries-18\", Row(30), results(18)) \ndbTest(\"DF-L3-fixedSalaries-19\", Row(31), results(19)) \n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"eb8be04d-655f-4c3e-8986-128854b5c7ca"},{"version":"CommandV1","origId":1745794912675614,"guid":"98998c2e-353c-4979-a72f-378e3b2e767a","subtype":"command","commandType":"auto","position":39.0,"command":"%md\n## Exercise 2\n\nAs a refinement, assume all salaries under $20,000 represent bad rows and filter them out.\n\nAdditionally, categorize each person's salary into $10K groups.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4be67d33-208d-4125-a08d-df2ba352fd76"},{"version":"CommandV1","origId":1745794912675615,"guid":"3eede474-f0c4-4782-820a-d5688369f4e6","subtype":"command","commandType":"auto","position":40.0,"command":"%md\n### Step 1\n Starting with the `peopleWithFixedSalariesDF` DataFrame, create a DataFrame called `peopleWithFixedSalaries20KDF` where:\n0. The data set excludes all records where salaries are below $20K.\n0. The data set includes a new column called `salary10k`, that should be the salary in groups of 10,000. For example:\n  * A salary of 23,000 should report a value of \"2\".\n  * A salary of 57,400 should report a value of \"6\".\n  * A salary of 1,231,375 should report a value of \"123\".","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ff4bab23-244c-41ee-a2e8-27a84987f4d5"},{"version":"CommandV1","origId":1745794912675616,"guid":"5e503f03-909a-45de-8adb-7fc9e456428c","subtype":"command","commandType":"auto","position":41.0,"command":"// TODO\nval peopleWithFixedSalaries20KDF = // FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f3abc180-54cb-49ae-bd1a-a2f85aaed893"},{"version":"CommandV1","origId":1745794912675617,"guid":"96ceeefc-579c-4b48-8767-c65b30c0ff32","subtype":"command","commandType":"auto","position":42.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val below20K = peopleWithFixedSalaries20KDF.filter($\"salary\" < \"20000\").count()\n \ndbTest(\"DF-L3-count-salaries\", 0, below20K)  \n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4d13d4b3-85ca-4b9a-86c2-a3db8289683b"},{"version":"CommandV1","origId":1745794912675618,"guid":"cabbec95-da2c-4bfa-9855-e44e75a72af6","subtype":"command","commandType":"auto","position":43.0,"command":"// TEST - Run this cell to test your solution.\n\nimport org.apache.spark.sql.functions.count\nlazy val results = peopleWithFixedSalaries20KDF\n  .select($\"salary10k\")\n  .groupBy($\"salary10k\")\n  .agg(count(\"*\") as \"total\")\n  .orderBy($\"salary10k\")\n  .limit(5)\n  .collect()\n\ndbTest(\"DF-L3-countSalaries-0\", Row(2,43792), results(0))\ndbTest(\"DF-L3-countSalaries-1\", Row(3,212630), results(1))\ndbTest(\"DF-L3-countSalaries-2\", Row(4,536536), results(2))\ndbTest(\"DF-L3-countSalaries-3\", Row(5,1055261), results(3))\ndbTest(\"DF-L3-countSalaries-4\", Row(6,1623248), results(4))\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"13203242-afab-4fea-be17-145c64a68bfb"},{"version":"CommandV1","origId":1745794912675619,"guid":"277f6bcd-241b-49a9-85e3-c930ce268228","subtype":"command","commandType":"auto","position":44.0,"command":"%md\n## Exercise 3\n\nUsing the `peopleDF` DataFrame, count the number of females named Caren who were born before March 1980. ","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d64115af-2b96-444c-9712-31fcb81e6afc"},{"version":"CommandV1","origId":1745794912675620,"guid":"bbad1345-89d9-446d-9c2c-d9386aee426c","subtype":"command","commandType":"auto","position":45.0,"command":"%md\n### Step 1\n\nStarting with `peopleDF`, create a DataFrame called `carensDF` where:\n0. The result set has a single record.\n0. The data set has a single column named `total`.\n0. The result counts only \n  * Females (`gender`)\n  * First Name is \"Caren\" (`firstName`)\n  * Born before March 1980 (`birthDate`)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2b084cf4-727d-45da-9e5a-4f0160826d1e"},{"version":"CommandV1","origId":1745794912675621,"guid":"6ab635ec-a959-4a1b-89a4-7f29593fc816","subtype":"command","commandType":"auto","position":46.0,"command":"// TODO\nval carensDF = // FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c026d04b-7e13-450e-9362-a14e75942c6d"},{"version":"CommandV1","origId":1745794912675622,"guid":"6a28ad86-4c25-45ab-b680-29f890fc0496","subtype":"command","commandType":"auto","position":47.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val rows = carensDF.collect()\ndbTest(\"DF-L3-carens-len\", 1, rows.length, \"Expected 1 recod, found \" + rows.length)\ndbTest(\"DF-L3-carens-total\", Row(750), rows(0),  \"Expected the total to be 750, found \" + rows(0))\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"adcc0c72-752a-4003-a303-a80ef55d2e30"},{"version":"CommandV1","origId":1745794912675623,"guid":"ad464e30-b830-42ad-bf6d-801cb3d33bef","subtype":"command","commandType":"auto","position":48.0,"command":"%md\n## Review Questions\n**Q:** What is the DataFrame equivalent of the SQL statement `SELECT count(*) AS total`  \n**A:** ```.agg(count(\"*\").alias(\"total\"))```\n\n**Q:** What is the DataFrame equivalent of the SQL statement \n```SELECT firstName FROM PeopleDistinctNames INNER JOIN SSADistinctNames ON firstName = ssaFirstName```  \n**A:** \n`peopleDistinctNamesDF.join(ssaDistinctNamesDF, peopleDistinctNamesDF($\"firstName\") === ssaDistinctNamesDF($\"ssaFirstName\"))`","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"59db5a08-343f-4693-bfa7-b7cc137b2385"},{"version":"CommandV1","origId":1745794912675624,"guid":"7dbe37ed-1ccb-4aea-bca7-33644555be92","subtype":"command","commandType":"auto","position":49.0,"command":"%md\n## Next Steps\n\n* Do the [Challenge Exercise]($./Optional/03-Joins-Aggregations).\n* Start the next lesson, [Accessing Data]($./04-Accessing-Data).","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"164c2d59-094b-4d92-b888-2b1171cd5286"},{"version":"CommandV1","origId":1745794912675625,"guid":"28eedf5e-e9b6-4646-87ea-66f2fe67c327","subtype":"command","commandType":"auto","position":50.0,"command":"%md\n## Additional Topics & Resources\n\n* <a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html\" target=\"_blank\">Spark SQL, DataFrames and Datasets Guide</a>\n* <a href=\"https://databricks.com/blog/2017/08/31/cost-based-optimizer-in-apache-spark-2-2.html\" target=\"_blank\">Cost-based Optimizer in Apache Spark 2.2</a>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"86ee8989-3c03-4dba-b122-d83f942fd97c"}],"dashboards":[],"guid":"4cd20663-769c-496c-9a9f-41d92143a3fa","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}