{"version":"NotebookV1","origId":1745794912674823,"name":"03-Joins-Aggregations","language":"scala","commands":[{"version":"CommandV1","origId":1745794912674824,"guid":"bf5551ca-9fd8-436b-81de-ac9d5d206d5c","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n# Aggregations and JOINs\nApache Spark&trade; and Databricks&reg; allow you to create on-the-fly data lakes.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ebafd213-5801-4c57-91fd-fbab24195894"},{"version":"CommandV1","origId":1745794912674825,"guid":"8cb6317d-28bb-41c2-b7e7-ccdd94b99db1","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n### Getting Started\n\nRun the following cell to configure our \"classroom.\"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"905a37af-93a1-43e3-8b9c-d9459f3df3e4"},{"version":"CommandV1","origId":1745794912674826,"guid":"51481726-35cf-41d8-9573-38bcd4837e4d","subtype":"command","commandType":"auto","position":4.0,"command":"%run \"./Includes/Classroom-Setup\"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"df18828a-dde7-4d6e-9d66-08e35ed9c6c0"},{"version":"CommandV1","origId":1745794912674827,"guid":"7a206fd7-a948-4096-b157-6dabb9f120e4","subtype":"command","commandType":"auto","position":6.0,"command":"%md-sandbox\n## Basic Aggregations\n\nUsing <a \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions\" target=\"_blank\">built-in Spark functions</a>, you can aggregate data in various ways. \n\nRun the cell below to compute the average of all salaries in the people DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> By default, you get a floating point value.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6f87a5ef-b011-4a8a-bb8c-43c1bc61577a"},{"version":"CommandV1","origId":1745794912674828,"guid":"c7eddf9c-4898-4024-94bf-6ef1e79d91aa","subtype":"command","commandType":"auto","position":8.0,"command":"val peopleDF = spark.read.parquet(\"/mnt/training/dataframes/people-10m.parquet\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0b033cda-4106-42c7-bb4f-2cdfd11e71a4"},{"version":"CommandV1","origId":1745794912674829,"guid":"af36dcc9-08cb-41c8-ac88-42af3bd7c8cc","subtype":"command","commandType":"auto","position":9.0,"command":"import org.apache.spark.sql.functions.avg\nval avgSalaryDF = peopleDF.select(avg($\"salary\") as \"averageSalary\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"73965702-0235-4d41-958c-d42d36595672"},{"version":"CommandV1","origId":1745794912674830,"guid":"9f32a6ba-438f-4f51-a1f5-316528e451a2","subtype":"command","commandType":"auto","position":10.0,"command":"%md\nConvert that value to an integer using the `round()` function. See\n<a href \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" class=\"text-info\">the documentation for <tt>round()</tt></a>\nfor more details.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9f3661e6-b343-4382-8ad3-16423da3774f"},{"version":"CommandV1","origId":1745794912674831,"guid":"016b2fe6-b2a5-41f8-9a56-1f1f37e5f850","subtype":"command","commandType":"auto","position":11.0,"command":"import org.apache.spark.sql.functions.round\nval roundedAvgSalaryDF = avgSalaryDF.select(round($\"averageSalary\") as \"roundedAverageSalary\")\n\nroundedAvgSalaryDF.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b118f707-bdd9-4e37-8e4c-41a2fbd84391"},{"version":"CommandV1","origId":1745794912674832,"guid":"3883442d-cb9c-49d9-b305-342fa3ceb6bf","subtype":"command","commandType":"auto","position":12.0,"command":"%md\nIn addition to the average salary, what are the maximum and minimum salaries?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"531f3954-4d9b-4cb5-b140-1c1cb7eca5ad"},{"version":"CommandV1","origId":1745794912674833,"guid":"80790055-f56a-48f9-b1d9-583035dfa224","subtype":"command","commandType":"auto","position":13.0,"command":"import org.apache.spark.sql.functions.{min, max}\nval salaryDF = peopleDF.select(max($\"salary\") as \"max\", min($\"salary\") as \"min\", round(avg($\"salary\")) as \"averageSalary\")\n\nsalaryDF.show()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2adb5308-8ef9-4c5e-a599-a90278efb547"},{"version":"CommandV1","origId":1745794912674834,"guid":"6e0419df-4a9e-4ea1-b167-33c356b27978","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n## Joining Two Data Sets\n\nCorrelate the data in two data sets using a DataFrame join. \n\nThe `people` data set has 10 million names in it. \n\n> How many of the first names appear in Social Security data files? \n\nTo find out, use the Social Security data set with first name popularity data from the United States Social Security Administration. \n\nFor every year from 1880 to 2014, `dbfs:/mnt/training/ssn/names-1880-2016.parquet/` lists the first names of people born in that year, their gender, and the total number of people given that name. \n\nBy joining the `people` data set with `names-1880-2016`, weed out the names that aren't represented in the Social Security data.\n\n(In a real application, you might use a join like this to filter out bad data.)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"06d814b7-83b7-4512-addb-79de3b98d3d5"},{"version":"CommandV1","origId":1745794912674835,"guid":"a4b4257d-cfae-4017-8fd0-de71cbaa5639","subtype":"command","commandType":"auto","position":16.0,"command":"%md\nStart by taking a look at what the social security data set looks like. Each year is its own directory.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1cedc315-355b-4055-8dca-aa7610b97d86"},{"version":"CommandV1","origId":1745794912674836,"guid":"72e4de7a-c231-4280-990c-8bc362b414a5","subtype":"command","commandType":"auto","position":17.0,"command":"%fs ls dbfs:/mnt/training/ssn/names-1880-2016.parquet/","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5704c4c2-175c-4fc4-9657-4b38550166c3"},{"version":"CommandV1","origId":1745794912674837,"guid":"653fb464-2a15-4b7a-9df3-62aff1b640c7","subtype":"command","commandType":"auto","position":18.0,"command":"%md\nLet's load this file into a DataFrame and look at the data.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cfa2adcb-d105-446a-b993-9d433b7b65ff"},{"version":"CommandV1","origId":1745794912674838,"guid":"2eeb40dd-797a-44c1-9bbf-53ac6022708d","subtype":"command","commandType":"auto","position":19.0,"command":"val ssaDF = spark.read.parquet(\"/mnt/training/ssn/names-1880-2016.parquet/\")\n\ndisplay(ssaDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d12638e7-ddc6-4e2b-8d48-7448d19e3e6a"},{"version":"CommandV1","origId":1745794912674839,"guid":"8e72e982-b0e8-4962-9bd4-bfb862ba3679","subtype":"command","commandType":"auto","position":20.0,"command":"%md\nNext, with a quick count of distinct names, get an idea of how many distinct names there are in each of the tables.\n\nDataFrames have a `distinct` method just for this purpose.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"accd8c03-f6e5-4e31-9285-fab3d19edf1e"},{"version":"CommandV1","origId":1745794912674840,"guid":"b0c84e8e-d244-48e7-8f26-a5cff5f5dc2a","subtype":"command","commandType":"auto","position":21.0,"command":"val peopleDistinctNamesDF = peopleDF.select($\"firstName\").distinct","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ba951993-e18d-4d17-865f-85fb8f1896d2"},{"version":"CommandV1","origId":1745794912674841,"guid":"d85763ce-0e7b-4909-bf1f-bc47d5b2233c","subtype":"command","commandType":"auto","position":22.0,"command":"peopleDistinctNamesDF.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ab0c88db-192c-405f-ba2a-e1c69375b874"},{"version":"CommandV1","origId":1745794912674842,"guid":"cb31ad14-527e-45e8-bab6-a01dbd0a1dcc","subtype":"command","commandType":"auto","position":23.0,"command":"%md-sandbox\nIn preparation for the join, let's rename the `firstName` column to `ssaFirstName` in the Social Security DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> Question to ponder: why would we want to do this?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"02d6ed12-746f-4717-b7ea-db990a77ba1f"},{"version":"CommandV1","origId":1745794912674843,"guid":"c37b3a64-a906-4927-8ff7-9f1f8a5477bc","subtype":"command","commandType":"auto","position":24.0,"command":"val ssaDistinctNamesDF = ssaDF.select($\"firstName\" as \"ssaFirstName\").distinct","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"63af0948-1bfc-40d1-a249-ae54b994a84b"},{"version":"CommandV1","origId":1745794912674844,"guid":"12e64df1-667b-45e0-a377-0a94c37e1c1a","subtype":"command","commandType":"auto","position":25.0,"command":"%md\nCount how many distinct names in the Social Security DataFrame.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ee274b68-7fe5-4733-a459-1209ac471a93"},{"version":"CommandV1","origId":1745794912674845,"guid":"1ee767c0-2eb5-4ea5-a8c1-397847bcad8b","subtype":"command","commandType":"auto","position":26.0,"command":"ssaDistinctNamesDF.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4da22133-6208-4ad5-ac25-b49b39441d98"},{"version":"CommandV1","origId":1745794912674846,"guid":"deec0917-fff6-4479-ae95-d31998fca897","subtype":"command","commandType":"auto","position":27.0,"command":"%md\nNow join the two DataFrames.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"91603c04-6b8a-4d6e-9fed-601b24b02327"},{"version":"CommandV1","origId":1745794912674847,"guid":"f8a31283-3d4f-4079-9087-c70f6470302f","subtype":"command","commandType":"auto","position":28.0,"command":"val joinedDF = peopleDistinctNamesDF.join(ssaDistinctNamesDF, peopleDistinctNamesDF(\"firstName\") === ssaDistinctNamesDF(\"ssaFirstName\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b09e8b4e-80be-45f7-9a80-3b59ed8571dd"},{"version":"CommandV1","origId":1745794912674848,"guid":"233b025d-fd3e-40c9-b0a9-f35576f82349","subtype":"command","commandType":"auto","position":29.0,"command":"%md\nHow many are there?","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b3e1cf0d-f0da-448b-916f-8d9720caa1dc"},{"version":"CommandV1","origId":1745794912674849,"guid":"f59878c3-0d23-40a6-b77a-87cff22bd7b6","subtype":"command","commandType":"auto","position":30.0,"command":"joinedDF.count()","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c5361207-de16-4547-9260-b8ab874ed97a"},{"version":"CommandV1","origId":1745794912674850,"guid":"22393eab-3531-4937-8605-5358efc3a4a1","subtype":"command","commandType":"auto","position":31.0,"command":"%md-sandbox\n## Exercise 1\n\nIn the tables above, some of the salaries in the `peopleDF` DataFrame are negative. \n\nThese salaries represent bad data. \n\nYour job is to convert all the negative salaries to positive ones, and then sort the top 20 people by their salary.\n\n<img alt=\"Hint\" title=\"Hint\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.3em\" src=\"https://files.training.databricks.com/static/images/icon-light-bulb.svg\"/>&nbsp;**Hint:** See the Apache Spark documentation, <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">built-in functions</a>.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"82899817-7441-4f1a-b46d-f87a08be8793"},{"version":"CommandV1","origId":1745794912674851,"guid":"6c5fe522-1dd1-405b-a245-178360a95c06","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n### Step 1\nCreate a DataFrame`PeopleWithFixedSalariesDF`, where all the negative salaries have been converted to positive numbers.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0c3f5ec5-605f-4292-aee1-f786735eb920"},{"version":"CommandV1","origId":1745794912674852,"guid":"a1c082d2-4edd-40a7-8f0e-465459766a5c","subtype":"command","commandType":"auto","position":33.0,"command":"// ANSWER\n\nimport org.apache.spark.sql.functions.abs\nval peopleWithFixedSalariesDF = peopleDF.select($\"firstName\",$\"middleName\",$\"lastName\",$\"gender\",$\"birthDate\",$\"ssn\",abs($\"salary\") as \"salary\")\ndisplay(peopleWithFixedSalariesDF)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a6736950-028f-443b-a497-88706757b97b"},{"version":"CommandV1","origId":1745794912674853,"guid":"5d52c4c7-5062-4c13-9519-600ae7050463","subtype":"command","commandType":"auto","position":34.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val belowZero = peopleWithFixedSalariesDF.filter($\"salary\" < \"0\").count()\ndbTest(\"DF-L3-belowZero\", 0, belowZero, \"Expected 0 records to have a salary below zero, found \" + belowZero)\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3c77962d-05e5-4de2-9de3-d17ce25d4f38"},{"version":"CommandV1","origId":1745794912674854,"guid":"11285a1e-842e-49b0-890b-13ec2f7a1b58","subtype":"command","commandType":"auto","position":35.0,"command":"%md\n### Step 2\n\nStarting with the `peopleWithFixedSalariesDF` DataFrame, create another DataFrame called `PeopleWithFixedSalariesSortedDF` where:\n0. The data set has been reduced to the first 20 records.\n0. The records are sorted by the column `salary` in ascending order.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"11634a2a-7a84-46df-91ce-57cf15257b9b"},{"version":"CommandV1","origId":1745794912674855,"guid":"190c99c6-b7d6-4e1b-ad04-a81fc45138bf","subtype":"command","commandType":"auto","position":36.0,"command":"// ANSWER\nval peopleWithFixedSalariesSortedDF = peopleWithFixedSalariesDF.select(\"*\").orderBy($\"salary\").limit(20)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6e6db8df-1b61-43a5-8aa5-31ad36248123"},{"version":"CommandV1","origId":1745794912674856,"guid":"9f599cb4-f68e-487d-9b51-7da5af4c9b86","subtype":"command","commandType":"auto","position":37.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val resultsDF = peopleWithFixedSalariesSortedDF.select($\"salary\")\ndbTest(\"DF-L3-count\", 20, resultsDF.count(), \"Expected 20 records, found \" + resultsDF.count())\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6dd18e1d-403d-4292-a931-10ccbb3cf7b9"},{"version":"CommandV1","origId":1745794912674857,"guid":"a24c8947-5371-4b27-a4e7-3b79d8f4ddb4","subtype":"command","commandType":"auto","position":38.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val results = resultsDF.collect()\n\ndbTest(\"DF-L3-fixedSalaries-0\", Row(2), results(0))\ndbTest(\"DF-L3-fixedSalaries-1\", Row(3), results(1))\ndbTest(\"DF-L3-fixedSalaries-2\", Row(4), results(2))\n\ndbTest(\"DF-L3-fixedSalaries-10\", Row(19), results(10))\ndbTest(\"DF-L3-fixedSalaries-11\", Row(19), results(11))\ndbTest(\"DF-L3-fixedSalaries-12\", Row(20), results(12))\n\ndbTest(\"DF-L3-fixedSalaries-17\", Row(28), results(17))\ndbTest(\"DF-L3-fixedSalaries-18\", Row(30), results(18)) \ndbTest(\"DF-L3-fixedSalaries-19\", Row(31), results(19)) \n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"773abe1e-d883-4a60-ad6a-60ed9902bebd"},{"version":"CommandV1","origId":1745794912674858,"guid":"9b00a14e-614a-408e-af11-dea9a2e259d4","subtype":"command","commandType":"auto","position":39.0,"command":"%md\n## Exercise 2\n\nAs a refinement, assume all salaries under $20,000 represent bad rows and filter them out.\n\nAdditionally, categorize each person's salary into $10K groups.","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8267c43b-a3c4-4aba-931e-1ebc1bfc7da6"},{"version":"CommandV1","origId":1745794912674859,"guid":"c48bd898-b429-4e42-b619-5ac7f09f5947","subtype":"command","commandType":"auto","position":40.0,"command":"%md\n### Step 1\n Starting with the `peopleWithFixedSalariesDF` DataFrame, create a DataFrame called `peopleWithFixedSalaries20KDF` where:\n0. The data set excludes all records where salaries are below $20K.\n0. The data set includes a new column called `salary10k`, that should be the salary in groups of 10,000. For example:\n  * A salary of 23,000 should report a value of \"2\".\n  * A salary of 57,400 should report a value of \"6\".\n  * A salary of 1,231,375 should report a value of \"123\".","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"041aed20-8009-41fe-8ba5-fa963b1e64be"},{"version":"CommandV1","origId":1745794912674860,"guid":"a2de8fd3-4289-4de3-baf0-3c6c58948038","subtype":"command","commandType":"auto","position":41.0,"command":"// ANSWER\n\nval peopleWithFixedSalaries20KDF = peopleWithFixedSalariesDF.select(\"*\").withColumn(\"salary10k\", round($\"salary\"/10000)).filter($\"salary\" >= \"20000\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"254d0c39-68cb-4dc1-9109-0cf021572b21"},{"version":"CommandV1","origId":1745794912674861,"guid":"eeb83001-3f89-48f7-8f32-d5f531956fd6","subtype":"command","commandType":"auto","position":42.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val below20K = peopleWithFixedSalaries20KDF.filter($\"salary\" < \"20000\").count()\n \ndbTest(\"DF-L3-count-salaries\", 0, below20K)  \n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c8db0146-7d56-4fe6-8a8f-da21e28a7ecc"},{"version":"CommandV1","origId":1745794912674862,"guid":"7f779b33-62a0-4747-8a05-7473f4fb3c65","subtype":"command","commandType":"auto","position":43.0,"command":"// TEST - Run this cell to test your solution.\n\nimport org.apache.spark.sql.functions.count\nlazy val results = peopleWithFixedSalaries20KDF\n  .select($\"salary10k\")\n  .groupBy($\"salary10k\")\n  .agg(count(\"*\") as \"total\")\n  .orderBy($\"salary10k\")\n  .limit(5)\n  .collect()\n\ndbTest(\"DF-L3-countSalaries-0\", Row(2,43792), results(0))\ndbTest(\"DF-L3-countSalaries-1\", Row(3,212630), results(1))\ndbTest(\"DF-L3-countSalaries-2\", Row(4,536536), results(2))\ndbTest(\"DF-L3-countSalaries-3\", Row(5,1055261), results(3))\ndbTest(\"DF-L3-countSalaries-4\", Row(6,1623248), results(4))\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6734f6b2-605b-419b-9cc0-b40a6e8691bc"},{"version":"CommandV1","origId":1745794912674863,"guid":"d03dc575-8895-4077-94d5-afa23957cd58","subtype":"command","commandType":"auto","position":44.0,"command":"%md\n## Exercise 3\n\nUsing the `peopleDF` DataFrame, count the number of females named Caren who were born before March 1980. ","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5218ede1-7440-4311-bf99-949c93d23372"},{"version":"CommandV1","origId":1745794912674864,"guid":"02a46fff-24fb-48fb-ae97-8c1c25ba7132","subtype":"command","commandType":"auto","position":45.0,"command":"%md\n### Step 1\n\nStarting with `peopleDF`, create a DataFrame called `carensDF` where:\n0. The result set has a single record.\n0. The data set has a single column named `total`.\n0. The result counts only \n  * Females (`gender`)\n  * First Name is \"Caren\" (`firstName`)\n  * Born before March 1980 (`birthDate`)","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b3e3e6c7-2d3d-4bd4-9d9e-b864c8229b44"},{"version":"CommandV1","origId":1745794912674865,"guid":"fb26e3f3-945f-4cac-aeb1-ca214aaf91e3","subtype":"command","commandType":"auto","position":46.0,"command":"// ANSWER\nval carensDF = peopleDF\n  .filter($\"birthDate\" < \"1980-03-01\")\n  .filter($\"firstName\" === \"Caren\")\n  .filter($\"gender\" === \"F\")\n  .agg(count(\"*\").alias(\"total\"))","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"03398d74-0cc5-4456-9081-ed7c065107a1"},{"version":"CommandV1","origId":1745794912674866,"guid":"ffa1fab9-a7a1-444a-b479-aa77e3bf3011","subtype":"command","commandType":"auto","position":47.0,"command":"// TEST - Run this cell to test your solution.\n\nlazy val rows = carensDF.collect()\ndbTest(\"DF-L3-carens-len\", 1, rows.length, \"Expected 1 recod, found \" + rows.length)\ndbTest(\"DF-L3-carens-total\", Row(750), rows(0),  \"Expected the total to be 750, found \" + rows(0))\n\nprintln(\"Tests passed!\")","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5f58bec6-0308-4408-98f9-4fd15647138f"},{"version":"CommandV1","origId":1745794912674867,"guid":"1a3d575a-3f87-466f-a98c-eedb8f907d42","subtype":"command","commandType":"auto","position":48.0,"command":"%md\n## Review Questions\n**Q:** What is the DataFrame equivalent of the SQL statement `SELECT count(*) AS total`  \n**A:** ```.agg(count(\"*\").alias(\"total\"))```\n\n**Q:** What is the DataFrame equivalent of the SQL statement \n```SELECT firstName FROM PeopleDistinctNames INNER JOIN SSADistinctNames ON firstName = ssaFirstName```  \n**A:** \n`peopleDistinctNamesDF.join(ssaDistinctNamesDF, peopleDistinctNamesDF($\"firstName\") === ssaDistinctNamesDF($\"ssaFirstName\"))`","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"efdf3a4b-a5ca-4ce6-8a50-5af7ca382422"},{"version":"CommandV1","origId":1745794912674868,"guid":"c4b0d71b-0dbd-48bc-a16b-e46179ffead2","subtype":"command","commandType":"auto","position":49.0,"command":"%md\n## Next Steps\n\n* Do the [Challenge Exercise]($./Optional/03-Joins-Aggregations).\n* Start the next lesson, [Accessing Data]($./04-Accessing-Data).","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d5542693-3a4b-4def-befe-328f29bbd4f1"},{"version":"CommandV1","origId":1745794912674869,"guid":"74713a42-b90e-45d6-a274-3e99af155bac","subtype":"command","commandType":"auto","position":50.0,"command":"%md\n## Additional Topics & Resources\n\n* <a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html\" target=\"_blank\">Spark SQL, DataFrames and Datasets Guide</a>\n* <a href=\"https://databricks.com/blog/2017/08/31/cost-based-optimizer-in-apache-spark-2-2.html\" target=\"_blank\">Cost-based Optimizer in Apache Spark 2.2</a>","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"643d41bd-bc7b-41e7-b1c7-ff5b91865b37"}],"dashboards":[],"guid":"8abce417-67c3-4469-b5b1-4f6cdcfdd93c","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}