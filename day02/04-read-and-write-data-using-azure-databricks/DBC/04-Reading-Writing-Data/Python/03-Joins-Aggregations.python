{"version":"NotebookV1","origId":1745794912677690,"name":"03-Joins-Aggregations","language":"python","commands":[{"version":"CommandV1","origId":1745794912677691,"guid":"b8ada715-a331-4d98-96df-fa0083bd410c","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n# Aggregations and JOINs\nApache Spark&trade; and Databricks&reg; allow you to create on-the-fly data lakes.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"30d7f96e-9586-497e-a938-e19e5d53cf60"},{"version":"CommandV1","origId":1745794912677692,"guid":"02878720-8aa1-45a7-9c9b-2eadb32f7a04","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n### Getting Started\n\nRun the following cell to configure our \"classroom.\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"28da6490-9cc8-425b-b376-cd97f0cc5415"},{"version":"CommandV1","origId":1745794912677693,"guid":"68d6fd90-0d67-4880-8327-d7de49acfe55","subtype":"command","commandType":"auto","position":4.0,"command":"%run \"./Includes/Classroom-Setup\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d452fe85-2cb4-435e-acff-716b2a266f91"},{"version":"CommandV1","origId":1745794912677694,"guid":"007b121a-1738-4e17-afbd-3820f71465b6","subtype":"command","commandType":"auto","position":6.0,"command":"%md-sandbox\n## Basic Aggregations\n\nUsing <a \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions\" target=\"_blank\">built-in Spark functions</a>, you can aggregate data in various ways. \n\nRun the cell below to compute the average of all salaries in the people DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> By default, you get a floating point value.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e546457e-01bf-48c3-9734-2d1dd448eccc"},{"version":"CommandV1","origId":1745794912677695,"guid":"27b9a296-24a0-4962-b1b4-d09f0de7482e","subtype":"command","commandType":"auto","position":8.0,"command":"peopleDF = spark.read.parquet(\"/mnt/training/dataframes/people-10m.parquet\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534970656414,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"35ae4dd0-28b6-4b4e-adeb-ef18a4de66f4"},{"version":"CommandV1","origId":1745794912677696,"guid":"cc37a121-10e8-4e6e-9d33-4e43a193639a","subtype":"command","commandType":"auto","position":9.0,"command":"from pyspark.sql.functions import avg\navgSalaryDF = peopleDF.select(avg(\"salary\").alias(\"averageSalary\"))\n\navgSalaryDF.show()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534970868581,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f39788eb-46dc-4bea-ab6c-87b753c82e5a"},{"version":"CommandV1","origId":1745794912677697,"guid":"68bb393d-be8a-48ed-bfe3-4fef30e9a478","subtype":"command","commandType":"auto","position":10.0,"command":"%md\nConvert that value to an integer using the `round()` function. See\n<a href \"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" class=\"text-info\">the documentation for <tt>round()</tt></a>\nfor more details.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ac4373f7-a42e-40a3-884e-d7cfc102c94b"},{"version":"CommandV1","origId":1745794912677698,"guid":"37c9fc9a-d098-4c83-a4ec-81a8e40ae2eb","subtype":"command","commandType":"auto","position":11.0,"command":"from pyspark.sql.functions import round\nroundedAvgSalaryDF = avgSalaryDF.select(round(\"averageSalary\").alias(\"roundedAverageSalary\"))\n\nroundedAvgSalaryDF.show()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534970906370,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4e181f58-d080-4a29-9422-da4aaabf17ad"},{"version":"CommandV1","origId":1745794912677699,"guid":"142e9e48-17dd-4159-bc98-cd20219bf5be","subtype":"command","commandType":"auto","position":12.0,"command":"%md\nIn addition to the average salary, what are the maximum and minimum salaries?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cac37081-868b-41af-852e-3aa9136edcca"},{"version":"CommandV1","origId":1745794912677700,"guid":"85b633e6-5bcc-438b-8d52-3eee903cf26c","subtype":"command","commandType":"auto","position":13.0,"command":"from pyspark.sql.functions import min, max\nsalaryDF = peopleDF.select(max(\"salary\").alias(\"max\"), min(\"salary\").alias(\"min\"), round(avg(\"salary\")).alias(\"averageSalary\"))\n\nsalaryDF.show()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534970941428,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"94b06963-e1d7-41d4-b5b0-55cb8118138c"},{"version":"CommandV1","origId":1745794912677701,"guid":"c6481f56-219f-44f2-9dba-6fe29e320ca4","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n## Joining Two Data Sets\n\nCorrelate the data in two data sets using a DataFrame join. \n\nThe `people` data set has 10 million names in it. \n\n> How many of the first names appear in Social Security data files? \n\nTo find out, use the Social Security data set with first name popularity data from the United States Social Security Administration. \n\nFor every year from 1880 to 2014, `dbfs:/mnt/training/ssn/names-1880-2016.parquet/` lists the first names of people born in that year, their gender, and the total number of people given that name. \n\nBy joining the `people` data set with `names-1880-2016`, weed out the names that aren't represented in the Social Security data.\n\n(In a real application, you might use a join like this to filter out bad data.)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3bc08436-1c2b-4089-b188-9659ee626882"},{"version":"CommandV1","origId":1745794912677702,"guid":"e6741a76-2087-483f-900d-0897cb4b9a21","subtype":"command","commandType":"auto","position":16.0,"command":"%md\nStart by taking a look at what the social security data set looks like. Each year is its own directory.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2c1ddf0f-39f4-4e53-a5f7-1cdef805e2d2"},{"version":"CommandV1","origId":1745794912677703,"guid":"45bcffeb-5f06-4953-b3d7-7cf96887af94","subtype":"command","commandType":"auto","position":17.0,"command":"%fs ls dbfs:/mnt/training/ssn/names-1880-2016.parquet/","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971024889,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6c46de4f-f796-429b-aec5-9019e1657d69"},{"version":"CommandV1","origId":1745794912677704,"guid":"084d1a0b-744d-4cba-b1ba-652de1112f39","subtype":"command","commandType":"auto","position":18.0,"command":"%md\nLet's load this file into a DataFrame and look at the data.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"df3ece27-d8b2-466c-a6c2-ce8da1fdee25"},{"version":"CommandV1","origId":1745794912677705,"guid":"8954dc45-8bc2-4472-9a16-4debd8d4f93c","subtype":"command","commandType":"auto","position":19.0,"command":"ssaDF = spark.read.parquet(\"/mnt/training/ssn/names-1880-2016.parquet/\")\n\ndisplay(ssaDF)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971061035,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4f537783-cd1c-43f0-bdb9-9646056e3144"},{"version":"CommandV1","origId":1745794912677706,"guid":"28aa268e-67f1-4f4c-bb68-319ca6d366a4","subtype":"command","commandType":"auto","position":20.0,"command":"%md\nNext, with a quick count of distinct names, get an idea of how many distinct names there are in each of the tables.\n\nDataFrames have a `distinct` method just for this purpose.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d6ae40e5-1c2c-4dd3-a82d-d0e5998342b5"},{"version":"CommandV1","origId":1745794912677707,"guid":"42cc1454-dcfa-45e7-8c3e-20d0b8a0fdda","subtype":"command","commandType":"auto","position":21.0,"command":"peopleDistinctNamesDF = peopleDF.select(\"firstName\").distinct()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971137702,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b9bf1c73-7d00-4f2e-ba80-27553e253f84"},{"version":"CommandV1","origId":1745794912677708,"guid":"cb0ed490-2de9-46b0-87dc-b45cce800d2a","subtype":"command","commandType":"auto","position":22.0,"command":"peopleDistinctNamesDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971143438,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e55abf98-92f3-4f6c-adc6-15176da39ce2"},{"version":"CommandV1","origId":1745794912677709,"guid":"6b9335c3-a603-4d11-a2a8-ea649eaeb9f5","subtype":"command","commandType":"auto","position":23.0,"command":"%md-sandbox\nIn preparation for the join, let's rename the `firstName` column to `ssaFirstName` in the Social Security DataFrame.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> Question to ponder: why would we want to do this?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dd18cb2b-0dec-416c-b870-7f29c924216f"},{"version":"CommandV1","origId":1745794912677710,"guid":"651d01d1-1979-48c9-9a7f-bf60497d955a","subtype":"command","commandType":"auto","position":24.0,"command":"ssaDistinctNamesDF = ssaDF.select(\"firstName\").withColumnRenamed(\"firstName\",'ssaFirstName').distinct()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971204993,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"458d46b7-7d44-441d-abd3-f8ccfb3da2af"},{"version":"CommandV1","origId":1745794912677711,"guid":"96f68311-0ab1-44d9-b1b3-a2de6919cc0c","subtype":"command","commandType":"auto","position":25.0,"command":"%md\nCount how many distinct names in the Social Security DataFrame.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"164f9529-9123-4a62-87ec-715f45025dd7"},{"version":"CommandV1","origId":1745794912677712,"guid":"25db119b-a2a4-473e-8abc-93a06b4da7aa","subtype":"command","commandType":"auto","position":26.0,"command":"ssaDistinctNamesDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971216743,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"90ef58d0-0092-4866-9159-9deacc52c1a4"},{"version":"CommandV1","origId":1745794912677713,"guid":"e538788c-bde0-473d-b6ca-6651d04b1094","subtype":"command","commandType":"auto","position":27.0,"command":"%md\nNow join the two DataFrames.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a077f6f2-c656-4387-8f1f-de57643ade7d"},{"version":"CommandV1","origId":1745794912677714,"guid":"d12e7cca-d2e9-43e2-9a75-61af132c07a3","subtype":"command","commandType":"auto","position":28.0,"command":"from pyspark.sql.functions import col\njoinedDF = peopleDistinctNamesDF.join(ssaDistinctNamesDF, col(\"firstName\") == col(\"ssaFirstName\"))","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971294270,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"df7e1c37-0593-4633-a3d4-132b1d000433"},{"version":"CommandV1","origId":1745794912677715,"guid":"7f35a337-dac3-4387-a2bb-a2da363621de","subtype":"command","commandType":"auto","position":29.0,"command":"%md\nHow many are there?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e15a3363-1d6f-4d54-a2ff-4fa57398a5ab"},{"version":"CommandV1","origId":1745794912677716,"guid":"b71e3842-ea3a-41db-b763-4486b3f127e4","subtype":"command","commandType":"auto","position":30.0,"command":"joinedDF.count()","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1534971300692,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"lino@solliance.net","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"403f6e3b-2481-4b84-aff8-a13574fc3a1f"},{"version":"CommandV1","origId":1745794912677717,"guid":"299856da-8802-4691-805b-b06d38dec912","subtype":"command","commandType":"auto","position":31.0,"command":"%md-sandbox\n## Exercise 1\n\nIn the tables above, some of the salaries in the `peopleDF` DataFrame are negative. \n\nThese salaries represent bad data. \n\nYour job is to convert all the negative salaries to positive ones, and then sort the top 20 people by their salary.\n\n<img alt=\"Hint\" title=\"Hint\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.3em\" src=\"https://files.training.databricks.com/static/images/icon-light-bulb.svg\"/>&nbsp;**Hint:** See the Apache Spark documentation, <a href=\"https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$\" target=\"_blank\">built-in functions</a>.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"de208ae1-36c1-4936-9948-2ea28e785872"},{"version":"CommandV1","origId":1745794912677718,"guid":"0f5bce87-275d-426b-8ccf-a9e1b2971ea7","subtype":"command","commandType":"auto","position":32.0,"command":"%md\n### Step 1\nCreate a DataFrame`PeopleWithFixedSalariesDF`, where all the negative salaries have been converted to positive numbers.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"350252df-fc2a-4ce9-b57f-77bba514b4dd"},{"version":"CommandV1","origId":1745794912677719,"guid":"eeb7cf03-e641-4527-8ded-d06b338d6444","subtype":"command","commandType":"auto","position":33.0,"command":"# TODO\n\nfrom pyspark.sql.functions import abs\npeopleWithFixedSalariesDF = # FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"573d6a89-88a2-486e-805c-6df341f48601"},{"version":"CommandV1","origId":1745794912677720,"guid":"f6322d06-e271-4c7a-a2be-a076cad12a45","subtype":"command","commandType":"auto","position":34.0,"command":"# TEST - Run this cell to test your solution.\n\nbelowZero = peopleWithFixedSalariesDF.filter(peopleWithFixedSalariesDF[\"salary\"] < 0).count()\ndbTest(\"DF-L3-belowZero\", 0, belowZero)\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4ba9239d-f888-4a58-af4c-2d497735da9f"},{"version":"CommandV1","origId":1745794912677721,"guid":"c2ca6b54-d5bc-4318-8f59-3e36d1e77499","subtype":"command","commandType":"auto","position":35.0,"command":"%md\n### Step 2\n\nStarting with the `peopleWithFixedSalariesDF` DataFrame, create another DataFrame called `PeopleWithFixedSalariesSortedDF` where:\n0. The data set has been reduced to the first 20 records.\n0. The records are sorted by the column `salary` in ascending order.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2ffbe282-d612-4d82-a3e9-7801b0bfd409"},{"version":"CommandV1","origId":1745794912677722,"guid":"c35f50a9-e4d1-4d00-8b1a-6adb00dec789","subtype":"command","commandType":"auto","position":36.0,"command":"# TODO\npeopleWithFixedSalariesSortedDF = # FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3f114741-49fc-4dd3-bb97-39e47bae70a3"},{"version":"CommandV1","origId":1745794912677723,"guid":"82b53777-fdaf-4568-94c4-b81b4f1b2d78","subtype":"command","commandType":"auto","position":37.0,"command":"# TEST - Run this cell to test your solution.\n\nresultsDF = peopleWithFixedSalariesSortedDF.select(\"salary\")\ndbTest(\"DF-L3-count\", 20, resultsDF.count())\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"af7e6ce7-4510-4fc7-8201-0c91419dadfd"},{"version":"CommandV1","origId":1745794912677724,"guid":"cd1cd067-57e9-4214-b739-49e21a575be9","subtype":"command","commandType":"auto","position":38.0,"command":"# TEST - Run this cell to test your solution.\n\nfrom pyspark.sql import Row\n\nresults = resultsDF.collect()\n\ndbTest(\"DF-L3-fixedSalaries-0\", Row(salary=2), results[0])\ndbTest(\"DF-L3-fixedSalaries-1\", Row(salary=3), results[1])\ndbTest(\"DF-L3-fixedSalaries-2\", Row(salary=4), results[2])\n\ndbTest(\"DF-L3-fixedSalaries-10\", Row(salary=19), results[10])\ndbTest(\"DF-L3-fixedSalaries-11\", Row(salary=19), results[11])\ndbTest(\"DF-L3-fixedSalaries-12\", Row(salary=20), results[12])\n\ndbTest(\"DF-L3-fixedSalaries-17\", Row(salary=28), results[17])\ndbTest(\"DF-L3-fixedSalaries-18\", Row(salary=30), results[18]) \ndbTest(\"DF-L3-fixedSalaries-19\", Row(salary=31), results[19]) \n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"15f1cf73-a2a6-4acc-9ee8-0a40249d11a9"},{"version":"CommandV1","origId":1745794912677725,"guid":"3c571e83-7ef5-4e06-8802-23bbf04a4350","subtype":"command","commandType":"auto","position":39.0,"command":"%md\n## Exercise 2\n\nAs a refinement, assume all salaries under $20,000 represent bad rows and filter them out.\n\nAdditionally, categorize each person's salary into $10K groups.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"216b7875-2a3a-4f9b-abb6-d4b8b681446b"},{"version":"CommandV1","origId":1745794912677726,"guid":"60a4a815-35e7-4dac-85de-9034418537d6","subtype":"command","commandType":"auto","position":40.0,"command":"%md\n### Step 1\n Starting with the `peopleWithFixedSalariesDF` DataFrame, create a DataFrame called `peopleWithFixedSalaries20KDF` where:\n0. The data set excludes all records where salaries are below $20K.\n0. The data set includes a new column called `salary10k`, that should be the salary in groups of 10,000. For example:\n  * A salary of 23,000 should report a value of \"2\".\n  * A salary of 57,400 should report a value of \"6\".\n  * A salary of 1,231,375 should report a value of \"123\".","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"552af77b-2f5d-4246-92ab-e15757df422d"},{"version":"CommandV1","origId":1745794912677727,"guid":"24954a83-2b7e-438e-87c4-453f9ae870f6","subtype":"command","commandType":"auto","position":41.0,"command":"# TODO\npeopleWithFixedSalaries20KDF = # FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"194f0ba6-e02d-42e2-b798-b166d6cbc4c1"},{"version":"CommandV1","origId":1745794912677728,"guid":"63102afc-a9ed-4da5-b0af-0bf70ba50af8","subtype":"command","commandType":"auto","position":42.0,"command":"# TEST - Run this cell to test your solution.\n\nbelow20K = peopleWithFixedSalaries20KDF.filter(\"salary < 20000\").count()\n \ndbTest(\"DF-L3-count-salaries\", 0, below20K)  \n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"df6d22fc-7b33-4bd8-9107-5b416ba66932"},{"version":"CommandV1","origId":1745794912677729,"guid":"238a7a5b-cf88-441e-a5d6-32e310e163f9","subtype":"command","commandType":"auto","position":43.0,"command":"# TEST - Run this cell to test your solution.\n\nfrom pyspark.sql.functions import count\nresults = (peopleWithFixedSalaries20KDF \n  .select(\"salary10k\") \n  .groupBy(\"salary10k\") \n  .agg(count(\"*\").alias(\"total\")) \n  .orderBy(\"salary10k\") \n  .limit(5) \n  .collect()\n)\n\ndbTest(\"DF-L3-countSalaries-0\", Row(salary10k=2.0, total=43792), results[0])\ndbTest(\"DF-L3-countSalaries-1\", Row(salary10k=3.0, total=212630), results[1])\ndbTest(\"DF-L3-countSalaries-2\", Row(salary10k=4.0, total=536536), results[2])\ndbTest(\"DF-L3-countSalaries-3\", Row(salary10k=5.0, total=1055261), results[3])\ndbTest(\"DF-L3-countSalaries-4\", Row(salary10k=6.0, total=1623248), results[4])\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"32ee74bb-fb67-4e92-b073-1419c7e09a05"},{"version":"CommandV1","origId":1745794912677730,"guid":"b374a9d1-9994-4a9b-a263-a18df47520fb","subtype":"command","commandType":"auto","position":44.0,"command":"%md\n## Exercise 3\n\nUsing the `peopleDF` DataFrame, count the number of females named Caren who were born before March 1980. ","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"893cce97-bac6-41d0-9dd4-76055408a715"},{"version":"CommandV1","origId":1745794912677731,"guid":"c90ba051-144a-41e2-923a-7075d7ae99a4","subtype":"command","commandType":"auto","position":45.0,"command":"%md\n### Step 1\n\nStarting with `peopleDF`, create a DataFrame called `carensDF` where:\n0. The result set has a single record.\n0. The data set has a single column named `total`.\n0. The result counts only \n  * Females (`gender`)\n  * First Name is \"Caren\" (`firstName`)\n  * Born before March 1980 (`birthDate`)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"22b85d44-b256-4bb4-8fa1-41777f855d99"},{"version":"CommandV1","origId":1745794912677732,"guid":"c5de898c-4389-4c67-8113-1ee60e574f43","subtype":"command","commandType":"auto","position":46.0,"command":"# TODO\ncarensDF = # FILL_IN","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"13d1fe34-a209-48a2-880a-faeb6bc051f2"},{"version":"CommandV1","origId":1745794912677733,"guid":"89c60704-ac97-40a8-8398-7f01be135c8e","subtype":"command","commandType":"auto","position":47.0,"command":"# TEST - Run this cell to test your solution.\n\nrows = carensDF.collect()\n\ndbTest(\"DF-L3-carens-len\", 1, len(rows))\ndbTest(\"DF-L3-carens-total\", Row(total=750), rows[0])\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"77cf3224-4e52-477b-bd53-573b8d13fa2f"},{"version":"CommandV1","origId":1745794912677734,"guid":"32f75c2f-98a5-46ab-864c-e060cf988c0d","subtype":"command","commandType":"auto","position":48.0,"command":"%md\n## Review Questions\n**Q:** What is the DataFrame equivalent of the SQL statement `SELECT count(*) AS total`  \n**A:** ```.agg(count(\"*\").alias(\"total\"))```\n\n**Q:** What is the DataFrame equivalent of the SQL statement \n```SELECT firstName FROM PeopleDistinctNames INNER JOIN SSADistinctNames ON firstName = ssaFirstName```  \n**A:** \n`peopleDistinctNamesDF.join(ssaDistinctNamesDF, peopleDistinctNamesDF(col(\"firstName\")) == col(\"ssaFirstName\"))`","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"fa488b32-7109-4b13-a2fb-62bd858c725f"},{"version":"CommandV1","origId":1745794912677735,"guid":"bd374da4-ceca-48d1-99e0-750c8b74e190","subtype":"command","commandType":"auto","position":49.0,"command":"%md\n## Next Steps\n\n* Do the [Challenge Exercise]($./Optional/03-Joins-Aggregations).\n* Start the next lesson, [Accessing Data]($./04-Accessing-Data).","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1867155a-e515-480b-8412-53f0532f2e42"},{"version":"CommandV1","origId":1745794912677736,"guid":"69ccfc49-b405-45fc-aeca-3dd2970ade47","subtype":"command","commandType":"auto","position":50.0,"command":"%md\n## Additional Topics & Resources\n\n* <a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html\" target=\"_blank\">Spark SQL, DataFrames and Datasets Guide</a>\n* <a href=\"https://databricks.com/blog/2017/08/31/cost-based-optimizer-in-apache-spark-2-2.html\" target=\"_blank\">Cost-based Optimizer in Apache Spark 2.2</a>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"33b795da-8928-4b45-ba61-2733157652b5"}],"dashboards":[],"guid":"a1b22409-5ad7-4fdf-aee4-341d6002e738","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}