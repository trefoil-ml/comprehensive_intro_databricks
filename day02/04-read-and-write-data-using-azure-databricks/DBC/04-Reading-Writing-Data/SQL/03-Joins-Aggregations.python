{"version":"NotebookV1","origId":1745794912676348,"name":"03-Joins-Aggregations","language":"python","commands":[{"version":"CommandV1","origId":1745794912676349,"guid":"d5af5fb9-f400-48c2-931d-056dba7973f6","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n# Aggregations, JOINs and Nested Queries\nApache Spark&trade; and Databricks&reg; allow you to create on-the-fly data lakes.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a1e3fbf2-2f0a-4b46-a17f-92ec478309db"},{"version":"CommandV1","origId":1745794912676350,"guid":"bdf5bd32-f9ad-4abd-8fc9-2995e5e0adaa","subtype":"command","commandType":"auto","position":3.0,"command":"%md\n### Getting Started\n\nRun the following cell to configure our \"classroom.\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"22cfe87a-0147-4229-8503-97263ec7d8f1"},{"version":"CommandV1","origId":1745794912676351,"guid":"10a4e85f-5dfc-456c-b8e7-7e11ed69ce30","subtype":"command","commandType":"auto","position":4.0,"command":"%run \"./Includes/Classroom-Setup\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"085a80ff-232f-41f3-8ae6-bac21c88db75"},{"version":"CommandV1","origId":1745794912676352,"guid":"df2d8931-3cb7-47c1-9ca0-722fc41dfe33","subtype":"command","commandType":"auto","position":6.0,"command":"%md-sandbox\n## Basic aggregations\n\nUsing <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions\" target=\"_blank\">built-in Spark functions</a>, you can aggregate data in various ways. \n\nRun the cell below to compute the average of all salaries in the `People10M` table.\n\n<img alt=\"Side Note\" title=\"Side Note\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.05em; transform:rotate(15deg)\" src=\"https://files.training.databricks.com/static/images/icon-note.webp\"/> By default, you get a floating point value.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c5522e2e-749f-4648-880b-a54da1c0c4b1"},{"version":"CommandV1","origId":1745794912676353,"guid":"9aa21808-8b5a-4c00-b996-a00de74289f7","subtype":"command","commandType":"auto","position":8.0,"command":"%sql\nSELECT avg(salary) AS averageSalary \nFROM People10M","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d2069559-c409-4285-98d8-0f8bfe9d44c0"},{"version":"CommandV1","origId":1745794912676354,"guid":"57211a6c-0402-4d7f-957d-de20873f7168","subtype":"command","commandType":"auto","position":9.0,"command":"%md\nConvert that value to an integer using the SQL `round()` function. See\n<a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.round\" class=\"text-info\">the PySpark documentation for <tt>round()</tt></a>\nfor more details.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"52f31b98-eba8-496f-9b6b-0db18f6cbf36"},{"version":"CommandV1","origId":1745794912676355,"guid":"9de53631-eaed-4a42-8133-3fca0a4713c2","subtype":"command","commandType":"auto","position":10.0,"command":"%sql\nSELECT round(avg(salary)) AS averageSalary \nFROM People10M","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6b9cbe11-4697-4050-bbcf-e2a837188f72"},{"version":"CommandV1","origId":1745794912676356,"guid":"4121e900-1565-4f42-9c66-4e7694f7ac2f","subtype":"command","commandType":"auto","position":11.0,"command":"%md\nIn addition to the average salary, what are the maximum and minimum salaries?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"aae0b8be-3c5f-4c3f-a3d4-ab0e9b763c3d"},{"version":"CommandV1","origId":1745794912676357,"guid":"8a416bcc-ecb9-46d6-83e5-7dd466e9780f","subtype":"command","commandType":"auto","position":12.0,"command":"%sql\nSELECT max(salary) AS max, min(salary) AS min, round(avg(salary)) AS average \nFROM People10M","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"272685b3-bf16-4672-b11a-60103288bb89"},{"version":"CommandV1","origId":1745794912676358,"guid":"4529f239-c706-4eee-8d1e-3d46197cc2d1","subtype":"command","commandType":"auto","position":13.0,"command":"%md\n## Joining two tables\n\nCorrelate the data in two data sets using a SQL join. \n\nThe `People10M` table has 10 million names in it. \n\n> How many of the first names appear in Social Security data files? \n\nTo find out, use the `SSANames` table with first name popularity data from the United States Social Security Administration. \n\nFor every year from 1880 to 2014, `SSANames` lists the first names of people born in that year, their gender, and the total number of people given that name. \n\nBy joining the `People10M` table with `SSANames`, weed out the names that aren't represented in the Social Security data.\n\n(In a real application, you might use a join like this to filter out bad data.)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"feff8ba0-69fc-46af-b397-0ae1eb8c2f36"},{"version":"CommandV1","origId":1745794912676359,"guid":"eff7d1cb-4e99-40ac-bfd5-45679649464b","subtype":"command","commandType":"auto","position":15.0,"command":"%md\nStart by taking a quick peek at what `SSANames` looks like.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0d1278d3-58be-411e-84c8-baf075b559cf"},{"version":"CommandV1","origId":1745794912676360,"guid":"a84ccf68-4b57-45b5-a800-cf26eea9dd0c","subtype":"command","commandType":"auto","position":16.0,"command":"%sql\nSELECT * FROM SSANames","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c9a3c526-8e2e-44db-9497-c1f1c2984c7d"},{"version":"CommandV1","origId":1745794912676361,"guid":"1dbfb0f6-247a-4f76-8659-6b5f4de55280","subtype":"command","commandType":"auto","position":17.0,"command":"%md\nNext, get an idea of how many distinct names there are in each of our tables, with a quick count of distinct names.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"be220e90-77ce-492e-b07b-9137299e7a46"},{"version":"CommandV1","origId":1745794912676362,"guid":"3addd3bb-38f3-4e81-93b9-c8c7e8b24adb","subtype":"command","commandType":"auto","position":18.0,"command":"%sql\nSELECT count(DISTINCT firstName) \nFROM People10M","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"88431117-9f0d-48f5-acb5-7abbe6f2c085"},{"version":"CommandV1","origId":1745794912676363,"guid":"34ce6ef7-2763-4a5a-985b-f8c55ba9a78a","subtype":"command","commandType":"auto","position":19.0,"command":"%sql\nSELECT count(DISTINCT firstName)\nFROM SSANames","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e1f144a0-915f-40c5-a99e-5d86e401354f"},{"version":"CommandV1","origId":1745794912676364,"guid":"7bbe43a9-18c0-4948-9a84-5100343d0e1f","subtype":"command","commandType":"auto","position":20.0,"command":"%md\nBy introducing two more temporary views, each one consisting of distinct names, the join will be easier to read/write.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"18a7acc9-6ad5-4150-a3e1-bca076b982be"},{"version":"CommandV1","origId":1745794912676365,"guid":"89ca4167-78a7-446e-bfb8-9dfe7a9d7b16","subtype":"command","commandType":"auto","position":21.0,"command":"%sql\nCREATE OR REPLACE TEMPORARY VIEW SSADistinctNames AS \n  SELECT DISTINCT firstName AS ssaFirstName \n  FROM SSANames;\n\nCREATE OR REPLACE TEMPORARY VIEW PeopleDistinctNames AS \n  SELECT DISTINCT firstName \n  FROM People10M","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"74e93fea-9a61-4787-a142-9c783aa011cb"},{"version":"CommandV1","origId":1745794912676366,"guid":"b2252ec4-2370-45b8-bdea-fed0131394bb","subtype":"command","commandType":"auto","position":22.0,"command":"%md\nNext, join the two tables together to get the answer.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b8e3fbde-63fe-4561-8080-f65dbb8f1513"},{"version":"CommandV1","origId":1745794912676367,"guid":"c9d2f6f3-4c20-44f3-a1f6-be129804808d","subtype":"command","commandType":"auto","position":23.0,"command":"%sql\nSELECT firstName \nFROM PeopleDistinctNames \nINNER JOIN SSADistinctNames ON firstName = ssaFirstName","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"66798c19-0b02-4afa-b01c-fde1bef65e08"},{"version":"CommandV1","origId":1745794912676368,"guid":"abac8556-3385-4297-a130-ddbc1094c4b4","subtype":"command","commandType":"auto","position":24.0,"command":"%md\nHow many are there?","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3a13550c-35b3-4fdb-9717-366ab6c8f2e4"},{"version":"CommandV1","origId":1745794912676369,"guid":"ed827c68-46be-409d-9664-bf67238732e8","subtype":"command","commandType":"auto","position":25.0,"command":"%sql\nSELECT count(*) \nFROM PeopleDistinctNames \nINNER JOIN SSADistinctNames ON firstName = ssaFirstName","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7a51577f-9721-4775-929b-aae2f1ee377f"},{"version":"CommandV1","origId":1745794912676370,"guid":"7fc094bc-d9f0-4d52-82fb-e4d5dc082b1b","subtype":"command","commandType":"auto","position":26.0,"command":"%md\n## Nested Queries\n\nJoins are not the only way to solve the problem. \n\nA sub-select works as well.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"4b834a37-81fb-46f0-8123-6f19ff16f4a6"},{"version":"CommandV1","origId":1745794912676371,"guid":"4c1f3a22-48d0-4de8-af2e-02afeed4a2dc","subtype":"command","commandType":"auto","position":28.0,"command":"%sql\nSELECT count(firstName) \nFROM PeopleDistinctNames\nWHERE firstName IN (\n  SELECT ssaFirstName FROM SSADistinctNames\n)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"aa09a7aa-212e-4ae9-9234-ff5b620b8e03"},{"version":"CommandV1","origId":1745794912676372,"guid":"920631d1-7827-48ff-ae50-92e37db45fcb","subtype":"command","commandType":"auto","position":29.0,"command":"%md-sandbox\n## Exercise 1\n\nIn the tables above, some of the salaries in the `People10M` table are negative. \n\nThese salaries represent bad data. \n\nYour job is to convert all the negative salaries to positive ones, and then sort the top 20 people by their salary.\n\n<img alt=\"Hint\" title=\"Hint\" style=\"vertical-align: text-bottom; position: relative; height:1.75em; top:0.3em\" src=\"https://files.training.databricks.com/static/images/icon-light-bulb.svg\"/>&nbsp;**Hint:** See the Apache Spark documentation, <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions\" target=\"_blank\">built-in functions</a>.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1e753a84-90f0-48ab-adc5-61dfb4691003"},{"version":"CommandV1","origId":1745794912676373,"guid":"7547f61f-9e3c-4c70-82c7-f9b329dc7ea1","subtype":"command","commandType":"auto","position":30.0,"command":"%md\n### Step 1\nCreate a temporary view called `PeopleWithFixedSalaries`, where all the negative salaries have been converted to positive numbers.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9e0c3c28-1917-4a6b-a50d-035e64987803"},{"version":"CommandV1","origId":1745794912676374,"guid":"6ddd1921-84f1-4055-89cb-f1aa1ce9213c","subtype":"command","commandType":"auto","position":31.0,"command":"%sql\n-- TODO\n\n<<FILL_IN>>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8f25ee1e-31e2-41bc-936e-d22a0eb945b1"},{"version":"CommandV1","origId":1745794912676375,"guid":"9d54d394-c768-4058-995a-a8d06babe008","subtype":"command","commandType":"auto","position":32.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nbelowZero = spark.read.table(\"PeopleWithFixedSalaries\").where(\"salary < 0\").count()\ndbTest(\"SQL-L3-belowZero\", 0, belowZero)\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ff9b2cba-9c81-4935-ad3a-10972081358c"},{"version":"CommandV1","origId":1745794912676376,"guid":"626fbe05-013b-430b-bf6a-a89378608485","subtype":"command","commandType":"auto","position":33.0,"command":"%md\n### Step 2\n\nStarting with the table `PeopleWithFixedSalaries`, create another view called `PeopleWithFixedSalariesSorted` where:\n0. The data set has been reduced to the first 20 records\n0. The records are sorted by the column `salary` in ascending order","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"90abbc2e-bcfa-48f3-8672-350b4f06ddc9"},{"version":"CommandV1","origId":1745794912676377,"guid":"2293892e-31e1-454b-98bd-af170cb37cd5","subtype":"command","commandType":"auto","position":34.0,"command":"%sql\n-- TODO\n\n<<FILL_IN>>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"63078dbb-1386-42a7-bc39-4594137c29f6"},{"version":"CommandV1","origId":1745794912676378,"guid":"585f24c6-10ce-42ea-991f-aabfa2f8c433","subtype":"command","commandType":"auto","position":35.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nresultsDF = spark.sql(\"select salary from PeopleWithFixedSalariesSorted\")\ndbTest(\"SQL-L3-count\", 20, resultsDF.count())\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"29c42965-9177-4b68-9b1c-4d4c127d77c2"},{"version":"CommandV1","origId":1745794912676379,"guid":"1b14b6af-d3b8-4b45-a540-bab11272894b","subtype":"command","commandType":"auto","position":36.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nresults = [r[0] for r in resultsDF.collect()]\n\ndbTest(\"SQL-L3-fixedSalaries-0\", 2, results[0])\ndbTest(\"SQL-L3-fixedSalaries-1\", 3, results[1])\ndbTest(\"SQL-L3-fixedSalaries-2\", 4, results[2])\n\ndbTest(\"SQL-L3-fixedSalaries-10\", 19, results[10])\ndbTest(\"SQL-L3-fixedSalaries-11\", 19, results[11])\ndbTest(\"SQL-L3-fixedSalaries-12\", 20, results[12])\n\ndbTest(\"SQL-L3-fixedSalaries-17\", 28, results[17])\ndbTest(\"SQL-L3-fixedSalaries-18\", 30, results[18])\ndbTest(\"SQL-L3-fixedSalaries-19\", 31, results[19])\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b33e0a2c-b283-42d5-a809-1aaf7020292c"},{"version":"CommandV1","origId":1745794912676380,"guid":"ed96fef1-1ca2-4448-8d8f-5ed8aeefa782","subtype":"command","commandType":"auto","position":37.0,"command":"%md\n## Exercise 2\n\nAs a refinement, assume that all salaries under $20,000 represent bad rows and filter them out.\n\nAdditionally, categorize each person's salary into $10K groups.","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7a192877-5ddf-4604-98f2-1fda0102f931"},{"version":"CommandV1","origId":1745794912676381,"guid":"13f52822-95aa-49fd-86f9-fe6f631f22e3","subtype":"command","commandType":"auto","position":38.0,"command":"%md\n### Step 1\nCreate a temporary view called `PeopleWithFixedSalaries20K` where:\n0. Start with the table `PeopleWithFixedSalaries`\n0. The data set excludes all records where salaries are below $20K\n0. The data set includes a new column called `salary10k`, that should be the salary in groups of 10,000. For example:\n  * A salary of 23,000 should report a value of \"2\"\n  * A salary of 57,400 should report a value of \"6\"\n  * A salary of 1,231,375 should report a value of \"123\"","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e0cfcd08-6f1e-4efa-b864-645a27ccf2e9"},{"version":"CommandV1","origId":1745794912676382,"guid":"99e55eab-c4aa-4527-a134-223e02b93d93","subtype":"command","commandType":"auto","position":39.0,"command":"%sql\n-- TODO\n\n<<FILL_IN>>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"69adfef4-b61c-44a1-8530-36e58009b3af"},{"version":"CommandV1","origId":1745794912676383,"guid":"e004c1c8-cae9-418f-b54a-55aa560ea191","subtype":"command","commandType":"auto","position":40.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nbelow2K = spark.sql(\"select * from PeopleWithFixedSalaries20K where salary < 20000\").count()\ndbTest(\"SQL-L3-count-salaries\", 0, below2K)\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"077212c0-c776-466d-b14c-1303c56e6745"},{"version":"CommandV1","origId":1745794912676384,"guid":"da9e50d0-e6ef-4183-84a2-464ba01d578f","subtype":"command","commandType":"auto","position":41.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nresultsDF = spark.sql(\"select salary10k, count(*) as total from PeopleWithFixedSalaries20K  group by salary10k order by salary10k, total limit 5\")\nresults = [ (str(int(r[0]))+\" w/\"+str(r[1])) for r in resultsDF.collect()]\n\ndbTest(\"SQL-L3-countSalaries-0\", \"2 w/43792\", results[0])\ndbTest(\"SQL-L3-countSalaries-1\", \"3 w/212630\", results[1])\ndbTest(\"SQL-L3-countSalaries-2\", \"4 w/536536\", results[2])\ndbTest(\"SQL-L3-countSalaries-3\", \"5 w/1055261\", results[3])\ndbTest(\"SQL-L3-countSalaries-4\", \"6 w/1623248\", results[4])\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"76c2cf7d-7876-43c0-8b65-5d7128e37aeb"},{"version":"CommandV1","origId":1745794912676385,"guid":"70a88fda-e18b-4e7e-acce-10f088b41f90","subtype":"command","commandType":"auto","position":42.0,"command":"%md\n## Exercise 3\n\nUsing the `People10M` table, count the number of females named Caren who were born before March 1980. ","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"38ee2cf3-db7c-4f7f-91e6-0e88654e479f"},{"version":"CommandV1","origId":1745794912676386,"guid":"2d619fc2-6de6-4384-a332-0eedcd58add9","subtype":"command","commandType":"auto","position":43.0,"command":"%md\n### Step 1\nStarting with the table `People10M`, create a temporary view called `Carens` where:\n0. The result set has a single record\n0. The data set has a single column named `total`\n0. The result counts only \n  * Females (`gender`)\n  * First Name is \"Caren\" (`firstName`)\n  * Born before March 1980 (`birthDate`)","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d5eadfd9-fe44-4d6a-86dd-57b58dd96bc5"},{"version":"CommandV1","origId":1745794912676387,"guid":"f3b7bbf3-7993-4a83-8884-9243fa76a507","subtype":"command","commandType":"auto","position":44.0,"command":"%sql\n-- TODO\n\n<<FILL_IN>>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5e3f238f-e3ef-4dad-9011-32664832064b"},{"version":"CommandV1","origId":1745794912676388,"guid":"7a5ba961-17d8-409e-baad-fade4c9fb455","subtype":"command","commandType":"auto","position":45.0,"command":"%python\n# TEST - Run this cell to test your solution.\n\nrows = spark.sql(\"SELECT total FROM Carens\").collect()\ndbTest(\"SQL-L3-carens-len\", 1, len(rows))\ndbTest(\"SQL-L3-carens-total\", 750, rows[0].total)\n\nprint(\"Tests passed!\")","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"44b60486-8237-42e5-8325-6cb24b8f5547"},{"version":"CommandV1","origId":1745794912676389,"guid":"8aee602d-5610-4424-aa13-b26bd4bc7735","subtype":"command","commandType":"auto","position":46.0,"command":"%md\n## Next Steps\n\n* Do the [Challenge Exercise]($./Optional/03-Joins-Aggregations).\n* Start the next lesson, [Accessing Data]($./04-Accessing-Data).","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b456d598-9d28-405b-826c-353d7dd2f3f4"},{"version":"CommandV1","origId":1745794912676390,"guid":"0e8a2195-9b74-413e-87e1-0a1656a7798b","subtype":"command","commandType":"auto","position":47.0,"command":"%md\n## Additional Topics & Resources\n\n* <a href=\"https://docs.databricks.com/spark/latest/spark-sql/index.html\" target=\"_blank\">Spark SQL Reference</a>\n* <a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html\" target=\"_blank\">Spark SQL, DataFrames and Datasets Guide</a>\n* <a href=\"https://databricks.com/blog/2017/08/31/cost-based-optimizer-in-apache-spark-2-2.html\" target=\"_blank\">Cost-based Optimizer in Apache Spark 2.2</a>","commandVersion":0,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"4258953226069350","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"612b7461-5784-45d2-ae61-1b37023a1716"}],"dashboards":[],"guid":"1c707d46-43c8-4a5d-a0d5-f18e9498fde4","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}